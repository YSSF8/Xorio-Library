// Custom notification
export function notice(message) {
    // Creates notification element
    const el = document.createElement('div');
    document.body.appendChild(el);
    el.innerHTML = message;
    el.classList.add('xorio-notice');

    // Notification style
    el.style.fontFamily = 'Segoe UI';
    el.style.padding = '8px';
    el.style.borderRadius = '5px';
    el.style.background = '#121212';
    el.style.width = 'max-content';
    el.style.position = 'fixed';
    el.style.bottom = '3rem';
    el.style.left = '50%';
    el.style.color = '#fff';
    el.style.cursor = 'default';
    el.style.opacity = '0';
    el.style.transition = 'bottom 200ms, opacity 200ms';
    el.style.transform = 'translate(-50%, -50%)';
    el.style.zIndex = '100';

    // Appearing and disappearing transition
    setTimeout(() => {
        el.style.bottom = '5rem';
        el.style.opacity = '1';
        setTimeout(() => {
            el.style.bottom = '7rem';
            el.style.opacity = '0';
            setTimeout(() => {
                el.remove();
            }, 200);
        }, 1200);
    });
}

// Makes an automatic counter
export function count(parent, milliseconds) {
    // Creates the counting variable
    var countValue = 0;

    // Creates the couting element for counting
    const count = document.createElement('h1');
    document.querySelector(parent).appendChild(count);
    count.innerHTML = '0';
    count.classList.add('xorio-count');
    count.style.fontFamily = 'Segoe UI';

    // Counting loop
    let loop = setInterval(() => {
        countValue++;
        count.innerHTML = countValue;
    }, milliseconds);

    // Checks if the milliseconds is an integer, if not it will give and error and it will not work
    if (Number.isInteger(milliseconds) == false) {
        clearInterval(loop);
        count.remove();
        throw new Error('Value can only be an "integer" \n   Try removing the quotes from the "value"');
    }

    // Checks if the milliseconds is null, if it's null it will give you an error and it will not work
    if (milliseconds == null) {
        throw new Error(`Null number \nTry using this: \n   xorio.count("${parent}", 0);`);
    }
}

// Makes element moves with WASD keys
export function WASDMovement(element) {
    // Selects element, makes the position of the element fixed, creates the coordinates variables
    const el = document.querySelector(element);
    el.style.position = 'fixed';
    var x = 0, y = 0;

    // Moving the selected element after pressing a key
    document.addEventListener('keydown', e => {
        if (e.keyCode == 68) {
            x += 10;
            el.style.left = x + 'px';
        } else if (e.keyCode == 65) {
            x -= 10;
            el.style.left = x + 'px';
        } else if (e.keyCode == 83) {
            y += 10;
            el.style.top = y + 'px';
        } else if (e.keyCode == 87) {
            y -= 10;
            el.style.top = y + 'px';
        }
    });
}

// Console.log but short, and customizable with CSS
export function print(message, style) {
    console.log(`%c${message}`, style);
}

// Makes elements follow the pointer
export function followPointer(element) {
    document.addEventListener('mousemove', e => {
        const follow = document.querySelector(element);
        let x = e.clientX;
        let y = e.clientY;
        follow.style.left = x + 'px';
        follow.style.top = y + 'px';
        follow.style.position = 'fixed';
        follow.style.pointerEvents = 'none';
    });
}

// Creates elements (in one line)
export function createElement(element, parent, className, text, placeholder) {
    const el = document.createElement(element);
    el.classList.add(className);
    document.querySelector(parent).appendChild(el);
    el.innerHTML = text;
    el.style.fontFamily = 'Segoe UI';
    el.placeholder = placeholder;
}

// Makes element moves with arrow keys
export function arrowsMovement(element) {
    // Selects element, makes the position of the element fixed, creates the coordinates variables
    const el = document.querySelector(element);
    el.style.position = 'fixed';
    var x = 0, y = 0;

    // Moving the selected element after pressing a key
    document.addEventListener('keydown', e => {
        if (e.keyCode == 39) {
            x += 10;
            el.style.left = x + 'px';
        } else if (e.keyCode == 37) {
            x -= 10;
            el.style.left = x + 'px';
        } else if (e.keyCode == 40) {
            y += 10;
            el.style.top = y + 'px';
        } else if (e.keyCode == 38) {
            y -= 10;
            el.style.top = y + 'px';
        }
    });
}

// Changes the position of the selected element
export function randomPosition(element) {
    const el = document.querySelector(element);

    el.style.position = 'fixed';
    el.style.left = Math.random() * window.innerWidth + 'px';
    el.style.top = Math.random() * window.innerHeight + 'px';
}

// Creates a random things
export class Random {
    constructor() {
        this.variable = this.variable;
    }

    // Random letter
    letter(parent) {
        const randElement = document.createElement('div');
        document.querySelector(parent).appendChild(randElement);
        randElement.classList.add('xorio-randomizer', 'xorio-random-ltr');
        let letter = Math.floor(Math.random() * (122 - 97 + 1) + 97);
        randElement.innerHTML = String.fromCharCode(letter);
        randElement.style.fontFamily = 'Segoe UI';
    }
    // Random number
    number(parent, number_limit) {
        if (Number.isInteger(number_limit) == false) {
            throw new Error('Value can only be an "integer" \n   Try removing the quotes from the "value"');
        }

        const randElement = document.createElement('div');
        document.querySelector(parent).appendChild(randElement);
        randElement.classList.add('xorio-randomizer', 'xorio-random-num');
        randElement.innerHTML = Math.floor(Math.random() * number_limit);
        randElement.style.fontFamily = 'Segoe UI';
    }
    // Random variable number
    var(number_limit) {
        this.variable = Math.floor(Math.random() * number_limit);
    }
}

// Better alert box
let boxes = false; // Declare a new boolean to limit the boxes

export function alert(title, button_text) {
    // Parent creation
    const el = document.createElement('div');
    el.innerHTML = `<h3 class="xorio-alert-title" style="margin: 0;">${document.URL} says</h3> <div style="margin-top: 3px;">${title}</div>`;
    el.classList.add('xorio-alert');
    document.body.appendChild(el);

    // Parent style
    el.style.background = '#121212';
    el.style.borderRadius = '8px';
    el.style.width = '25rem';
    el.style.height = '6.5rem';
    el.style.padding = '7px';
    el.style.overflow = 'auto';
    el.style.marginBottom = '7px';
    el.style.position = 'fixed';
    el.style.left = '50%';
    el.style.top = '47%';
    el.style.opacity = '0';
    el.style.color = '#fff';
    el.style.fontFamily = 'Segoe UI';
    el.style.transform = 'translate(-50%, -50%)';
    el.style.transition = '200ms';
    el.style.transitionProperty = 'top, opacity';
    el.style.wordWrap = 'break-word';

    // Button creation
    const btn = document.createElement('button');
    btn.innerHTML = button_text;
    btn.classList.add('xorio-alert-btn');
    el.appendChild(btn);

    // Button style
    btn.style.background = '#1e1e1e';
    btn.style.color = '#fff';
    btn.style.border = 'none';
    btn.style.padding = '7px';
    btn.style.cursor = 'pointer';
    btn.style.fontFamily = 'Segoe UI';
    btn.style.borderRadius = '5px';
    btn.style.textTransform = 'uppercase';
    btn.style.position = 'absolute';
    btn.style.right = '5px';
    btn.style.bottom = '5px';
    btn.style.transition = 'background 200ms';

    // Appearing transition
    setTimeout(() => {
        boxes = true;
        el.style.top = '50%';
        el.style.opacity = '1';
    });

    // Disappears after clicking the button
    btn.addEventListener('click', () => {
        boxes = false;
        el.style.top = '47%';
        el.style.opacity = '0';
        setTimeout(() => {
            el.remove();
        }, 200);
    });

    // Button mouseover
    btn.addEventListener('mouseover', () => {
        btn.style.background = '#1b1b1b';
    });

    // Button mouseout
    btn.addEventListener('mouseout', () => {
        btn.style.background = '#1e1e1e';
    });

    // Fixes the null button text
    if (btn.innerHTML == 'undefined' || btn.innerHTML == '') {
        btn.innerHTML = 'OK';
    }

    // Limits the  alert boxes
    if (boxes == true) {
        el.remove();
    }
}

// Better prompt box
// It uses the same variable as the alerts "boxes"
export function prompt(title, placeholder, button_text) {
    // Parent creation
    const el = document.createElement('div');
    el.innerHTML = `<h3 class="xorio-prompt-title" style="margin: 0;">${document.URL} says</h3> <div style="margin-top: 3px;">${title}</div> <input type="text" class="xorio-prompt-text_input">`;
    el.classList.add('xorio-prompt');
    document.body.appendChild(el);

    // Parent style
    el.style.background = '#121212';
    el.style.borderRadius = '8px';
    el.style.width = '25rem';
    el.style.height = '6.5rem';
    el.style.padding = '7px';
    el.style.overflow = 'auto';
    el.style.marginBottom = '7px';
    el.style.position = 'fixed';
    el.style.left = '50%';
    el.style.top = '47%';
    el.style.opacity = '0';
    el.style.color = '#fff';
    el.style.fontFamily = 'Segoe UI';
    el.style.transform = 'translate(-50%, -50%)';
    el.style.transition = '200ms';
    el.style.transitionProperty = 'top, opacity';
    el.style.wordWrap = 'break-word';

    // Text input style
    const input = document.querySelector('.xorio-prompt-text_input'); // Selection of the text input
    input.focus(); // Focus on the input
    input.placeholder = placeholder; // Text input placeholder
    input.style.outline = 'none';
    input.style.background = '#1e1e1e';
    input.style.border = 'none';
    input.style.borderRadius = '5px';
    input.style.padding = '7px';
    input.style.color = '#fff';
    input.style.marginTop = '3px';

    // Fixes the null text input placeholder
    if (input.placeholder == 'undefined' || input.placeholder == '') {
        input.placeholder = '';
    }

    // Button creation
    const btn = document.createElement('button');
    btn.innerHTML = button_text;
    btn.classList.add('xorio-prompt-btn');
    el.appendChild(btn);

    // Button style
    btn.style.background = '#1e1e1e';
    btn.style.color = '#fff';
    btn.style.border = 'none';
    btn.style.padding = '7px';
    btn.style.cursor = 'pointer';
    btn.style.fontFamily = 'Segoe UI';
    btn.style.borderRadius = '5px';
    btn.style.textTransform = 'uppercase';
    btn.style.position = 'absolute';
    btn.style.right = '5px';
    btn.style.bottom = '5px';
    btn.style.transition = 'background 200ms';

    // Appearing transition
    setTimeout(() => {
        boxes = true;
        el.style.top = '50%';
        el.style.opacity = '1';
    });

    // Disappears after clicking the button
    btn.addEventListener('click', () => {
        boxes = false;
        el.style.top = '47%';
        el.style.opacity = '0';
        setTimeout(() => {
            el.remove();
        }, 200);
    });

    // Button mouseover
    btn.addEventListener('mouseover', () => {
        btn.style.background = '#1b1b1b';
    });

    // Button mouseout
    btn.addEventListener('mouseout', () => {
        btn.style.background = '#1e1e1e';
    });

    // Fixes the null button text
    if (btn.innerHTML == 'undefined' || btn.innerHTML == '') {
        btn.innerHTML = 'OK';
    }

    // Limits the  alert boxes
    if (boxes == true) {
        el.remove();
    }
}

// A cool progressbar
export class Progressbar {
    constructor() {
        this.value = 0;
    }

    // Creates a new progressbar
    add(parent) {
        const el = document.createElement('div');
        el.classList.add('xorio-pb');
        document.querySelector(parent).appendChild(el);

        el.style.background = '#4e4e4e';
        el.style.width = '14rem';
        el.style.height = '1.2rem';
        el.style.borderRadius = '5px';
        el.style.overflow = 'hidden';
        el.style.margin = '3px 0 0 0';

        const pb = document.createElement('div');
        pb.classList.add('xorio-pb-inside');
        el.appendChild(pb);

        pb.style.background = 'rgb(10, 116, 202)';
        pb.style.height = '1.2rem';
        pb.style.transition = 'width 200ms';

        const txt = document.createElement('div');
        pb.appendChild(txt);

        txt.style.textAlign = 'center';
        txt.style.transform = 'translateY(-10%)';

        setInterval(() => {
            pb.style.width = this.value + '%';
            txt.innerHTML = this.value + '%';

            if (this.value > 100) {
                this.value = 100;
                txt.innerHTML = '100%';
            }
        }, 10);
    }
    // Removes all the progressbars
    remove() {
        const pbs = document.querySelectorAll('.xorio-pb');

        pbs.forEach(pb => {
            pb.remove();
        });
    }
}

// Makes the element moves using keys
export class Movements {
    // Moves with arrow keys
    arrows(element) {
        const el = document.querySelector(element);
        el.style.position = 'fixed';
        el.style.transition = 'left 50ms, top 50ms';
        let x = 0, y = 0;

        document.addEventListener('keydown', e => {
            switch (e.key) {
                case 'ArrowRight':
                    x += 10;
                    el.style.left = x + 'px';
                    break;
                case 'ArrowLeft':
                    x -= 10;
                    el.style.left = x + 'px';
                    break;
                case 'ArrowUp':
                    y -= 10;
                    el.style.top = y + 'px';
                    break;
                case 'ArrowDown':
                    y += 10;
                    el.style.top = y + 'px';
                    break;
            }
        });
    }
    // Moves with WASD keys
    WASD(element) {
        const el = document.querySelector(element);
        el.style.position = 'fixed';
        el.style.transition = 'left 50ms, top 50ms';
        let x = 0, y = 0;

        document.addEventListener('keydown', e => {
            switch (e.key) {
                case 'd':
                    x += 10;
                    el.style.left = x + 'px';
                    break;
                case 'a':
                    x -= 10;
                    el.style.left = x + 'px';
                    break;
                case 'w':
                    y -= 10;
                    el.style.top = y + 'px';
                    break;
                case 's':
                    y += 10;
                    el.style.top = y + 'px';
                    break;
            }
        });
    }
    // Moves with Arrow/WASD keys
    both(element) {
        const el = document.querySelector(element);
        el.style.position = 'fixed';
        el.style.transition = 'left 50ms, top 50ms';
        let x = 0, y = 0;

        document.addEventListener('keydown', e => {
            switch (e.key) {
                case 'ArrowRight':
                case 'd':
                    x += 10;
                    el.style.left = x + 'px';
                    break;
                case 'ArrowLeft':
                case 'a':
                    x -= 10;
                    el.style.left = x + 'px';
                    break;
                case 'ArrowUp':
                case 'w':
                    y -= 10;
                    el.style.top = y + 'px';
                    break;
                case 'ArrowDown':
                case 's':
                    y += 10;
                    el.style.top = y + 'px';
                    break;
            }
        });
    }
}