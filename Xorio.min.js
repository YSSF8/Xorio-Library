// Custom notification
export function notice(text) {
    // Creates notification element
    const el = document.createElement('div');
    document.body.appendChild(el);
    el.innerHTML = text;
    el.classList.add('xorio-notice');

    // Notification style
    el.style.fontFamily = 'Segoe UI';
    el.style.padding = '8px';
    el.style.borderRadius = '5px';
    el.style.background = '#121212';
    el.style.width = 'max-content';
    el.style.position = 'fixed';
    el.style.bottom = '3rem';
    el.style.left = '50%';
    el.style.color = '#fff';
    el.style.cursor = 'default';
    el.style.opacity = '0';
    el.style.transition = 'bottom 200ms, opacity 200ms';
    el.style.transform = 'translate(-50%, -50%)';

    // Appearing and disappearing transition
    setTimeout(() => {
        el.style.bottom = '5rem';
        el.style.opacity = '1';
        setTimeout(() => {
            el.style.bottom = '7rem';
            el.style.opacity = '0';
            setTimeout(() => {
                el.remove();
            }, 200);
        }, 1200);
    });
}

// Makes an automatic counter
export function count(parent, seconds) {
    // Creates the counting variable
    var countValue = 0;

    // Creates the couting element for counting
    const count = document.createElement('h1');
    document.querySelector(parent).appendChild(count);
    count.innerHTML = '0';
    count.classList.add('xorio-count');
    count.style.fontFamily = 'Segoe UI';

    // Counting loop
    let loop = setInterval(() => {
        countValue++;
        count.innerHTML = countValue;
    }, seconds);

    // Checks if the seconds is an integer, if not it will give and error and it will not work
    if (Number.isInteger(seconds) == false) {
        clearInterval(loop);
        count.remove();
        console.error('Error: Counter can only be an "integer" \nTry removing the quotes from the "value"');
    }

    // Checks if the seconds is null, if it's null it will give you an error and it will not work
    if (seconds == null) {
        console.error(`Error: Null number \nTry using this: \n    xorio.count("${parent}", 0);`);
    }
}

// Makes element moves with WASD keys
export function WASDElementMoving(element) {
    // Selects element, makes the position of the element fixed, creates the coordinates variables
    const el = document.querySelector(element);
    el.style.position = 'fixed';
    var x = 0, y = 0;

    // Moving the selected element after pressing a key
    document.addEventListener('keydown', (e) => {
        if (e.keyCode == 68) {
            x += 10;
            el.style.left = x + 'px';
        } else if (e.keyCode == 65) {
            x -= 10;
            el.style.left = x + 'px';
        } else if (e.keyCode == 83) {
            y += 10;
            el.style.top = y + 'px';
        } else if (e.keyCode == 87) {
            y -= 10;
            el.style.top = y + 'px';
        }
    });
}

// Console.log but short, and customizable with CSS
export function log(msg, style) {
    console.log(`%c${msg}`, style);
}

// Makes elements follow the pointer
export function followPointer(element) {
    document.addEventListener('mousemove', e => {
        const follow = document.querySelector(element);
        let x = e.clientX;
        let y = e.clientY;
        follow.style.left = x + 'px';
        follow.style.top = y + 'px';
        follow.style.position = 'fixed';
        follow.style.pointerEvents = 'none';
    });
}

// Creates elements (in one line)
export function createElement(element, parent, className, text, placeholder) {
    const el = document.createElement(element);
    el.classList.add(className);
    document.querySelector(parent).appendChild(el);
    el.innerHTML = text;
    el.style.fontFamily = 'Segoe UI';
    el.placeholder = placeholder;
}

// Declare a new variable to fix multiple alert opening
let fix = 0;

// Better alert box
export function alert(title, buttonText) {
    fix++;

    // Creates the parent and the title
    const el = document.createElement('div');
    el.innerHTML = `<h2 style="font-family: Segoe UI;">${title}</h2>`;
    el.classList.add('xorio-alert', 'alert-' + fix);
    document.body.appendChild(el);

    // Throws an error when the title is null
    if (title == '') {
        setTimeout(() => {
            document.querySelector('.alert-' + fix).remove();
        });
        console.error(`Error: Title can not be null \nTry using this: \n    xorio.alert("${document.title}");`);
    }

    // Parent style
    el.style.background = '#121212';
    el.style.color = '#fff';
    el.style.width = '25rem';
    el.style.height = '6.5rem';
    el.style.transform = 'translate(-50%, -50%)';
    el.style.position = 'absolute';
    el.style.left = '50%';
    el.style.top = '47%';
    el.style.borderRadius = '8px';
    el.style.padding = '10px';
    el.style.opacity = '0';
    el.style.zIndex = '100';
    el.style.transition = 'top 200ms, opacity 200ms';

    // Creates the OK button
    const btn = document.createElement('button');
    btn.innerHTML = buttonText;
    btn.classList.add('xorio-alert-btn');
    document.querySelector('.alert-' + fix).appendChild(btn);

    // If the text is null it will make the button string OK
    if (btn.innerHTML == 'undefined' || btn.innerHTML == '') {
        btn.innerHTML = 'OK';
    }

    // Button style
    btn.style.background = '#1e1e1e';
    btn.style.color = '#fff';
    btn.style.border = 'none';
    btn.style.padding = '7px';
    btn.style.cursor = 'pointer';
    btn.style.fontFamily = 'Segoe UI';
    btn.style.borderRadius = '5px';
    btn.style.float = 'right';
    btn.style.transition = 'background 200ms';

    // Removes the alert after clicking the OK button
    btn.addEventListener('click', () => {
        el.style.opacity = '0';
        el.style.top = '47%';
        setTimeout(() => {
            document.querySelector('.alert-' + fix).remove();
            fix--;
        }, 180);
    });

    // Change background on mouse over the button
    btn.addEventListener('mouseover', () => {
        btn.style.background = '#1b1b1b';
    });

    // Change back background on mouse over the button
    btn.addEventListener('mouseleave', () => {
        btn.style.background = '#1e1e1e';
    });

    // Appearing transition
    setTimeout(() => {
        el.style.top = '50%';
        el.style.opacity = '1';
    });
}