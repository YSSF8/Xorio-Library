// Custom notification
export function notice(message) {
    // Creates notification element
    const el = document.createElement('div');
    document.body.appendChild(el);
    el.innerHTML = message;
    el.classList.add('xorio-notice');

    // Notification style
    el.style.fontFamily = 'Segoe UI';
    el.style.padding = '8px';
    el.style.borderRadius = '5px';
    el.style.background = '#121212';
    el.style.width = 'max-content';
    el.style.position = 'fixed';
    el.style.bottom = '3rem';
    el.style.left = '50%';
    el.style.color = '#fff';
    el.style.cursor = 'default';
    el.style.opacity = '0';
    el.style.transition = 'bottom 200ms, opacity 200ms';
    el.style.transform = 'translate(-50%, -50%)';
    el.style.zIndex = '100';

    // Appearing and disappearing transition
    setTimeout(() => {
        el.style.bottom = '5rem';
        el.style.opacity = '1';
        setTimeout(() => {
            el.style.bottom = '7rem';
            el.style.opacity = '0';
            setTimeout(() => {
                el.remove();
            }, 200);
        }, 1200);
    });
}

// Makes an automatic counter
export function count(parent, milliseconds) {
    // Creates the counting variable
    var countValue = 0;

    // Creates the couting element for counting
    const count = document.createElement('h1');
    document.querySelector(parent).appendChild(count);
    count.innerHTML = '0';
    count.classList.add('xorio-count');
    count.style.fontFamily = 'Segoe UI';

    // Counting loop
    let loop = setInterval(() => {
        countValue++;
        count.innerHTML = countValue;
    }, milliseconds);

    // Checks if the milliseconds is an integer, if not it will give and error and it will not work
    if (Number.isInteger(milliseconds) == false) {
        clearInterval(loop);
        count.remove();
        throw new Error('Value can only be an "integer" \n   Try removing the quotes from the "value"');
    }

    // Checks if the milliseconds is null, if it's null it will give you an error and it will not work
    if (milliseconds == null) {
        throw new Error(`Null number \nTry using this: \n   xorio.count("${parent}", 0);`);
    }
}

// Makes element moves with WASD keys
export function WASDMovement(element) {
    // Selects element, makes the position of the element fixed, creates the coordinates variables
    const el = document.querySelector(element);
    el.style.position = 'fixed';
    var x = 0, y = 0;

    // Moving the selected element after pressing a key
    document.addEventListener('keydown', e => {
        if (e.keyCode == 68) {
            x += 10;
            el.style.left = x + 'px';
        } else if (e.keyCode == 65) {
            x -= 10;
            el.style.left = x + 'px';
        } else if (e.keyCode == 83) {
            y += 10;
            el.style.top = y + 'px';
        } else if (e.keyCode == 87) {
            y -= 10;
            el.style.top = y + 'px';
        }
    });
}

// Console.log but short, and customizable with CSS
export function print(message, style) {
    console.log(`%c${message}`, style);
}

// Makes elements follow the pointer
export function followPointer(element) {
    document.addEventListener('mousemove', e => {
        const follow = document.querySelector(element);
        let x = e.clientX;
        let y = e.clientY;
        follow.style.left = x + 'px';
        follow.style.top = y + 'px';
        follow.style.position = 'fixed';
        follow.style.pointerEvents = 'none';
    });
}

// Creates elements (in one line)
export function createElement(element, parent, className, text, placeholder) {
    const el = document.createElement(element);
    el.classList.add(className);
    document.querySelector(parent).appendChild(el);
    el.innerHTML = text;
    el.style.fontFamily = 'Segoe UI';
    el.placeholder = placeholder;
}

// Declare a new variable to fix multiple alert opening
let alertFix = 0;

// Better alert box
export function alert(title, buttonText) {
    alertFix++;

    // Creates the parent and the title
    const el = document.createElement('div');
    el.innerHTML = `<h3 class="xorio-alert-title" style="margin-top: 5px; font-family: Segoe UI;">${document.URL} says<br> <code style="margin-top: 4px;">${title}</code></h3>`;
    el.classList.add('xorio-alert', 'alert-' + alertFix);
    document.body.appendChild(el);

    // Throws an error when the title is null
    if (title == '') {
        err();
    } else if (title == null) {
        err();
    }

    function err() {
        setTimeout(() => {
            document.querySelector('.alert-' + alertFix).remove();
        });
        throw new Error(`Title can not be null \nTry using this: \n   xorio.alert("${document.title}");`);
    }

    // Removes the context menu
    el.addEventListener('contextmenu', e => {
        e.preventDefault();
    });

    // Parent style
    el.style.background = '#121212';
    el.style.color = '#fff';
    el.style.width = '25rem';
    el.style.height = '6.5rem';
    el.style.transform = 'translate(-50%, -50%)';
    el.style.position = 'fixed';
    el.style.left = '50%';
    el.style.top = '47%';
    el.style.borderRadius = '8px';
    el.style.padding = '10px';
    el.style.opacity = '0';
    el.style.zIndex = '100';
    el.style.transition = 'top 200ms, opacity 200ms';

    // Creates the OK button
    const btn = document.createElement('button');
    btn.innerHTML = buttonText;
    btn.classList.add('xorio-alert-btn');
    document.querySelector('.alert-' + alertFix).appendChild(btn);

    // If the text is null it will make the button string OK
    if (btn.innerHTML == 'undefined' || btn.innerHTML == '') {
        btn.innerHTML = 'OK';
    }

    // Button style
    btn.style.background = '#1e1e1e';
    btn.style.color = '#fff';
    btn.style.border = 'none';
    btn.style.padding = '7px';
    btn.style.cursor = 'pointer';
    btn.style.fontFamily = 'Segoe UI';
    btn.style.borderRadius = '5px';
    btn.style.float = 'right';
    btn.style.textTransform = 'uppercase';
    btn.style.transition = 'background 200ms';

    // Removes the alert after clicking the OK button
    btn.addEventListener('click', () => {
        // Disappearing transition
        el.style.opacity = '0';
        el.style.top = '47%';

        // Removes the element
        setTimeout(() => {
            document.querySelector('.alert-' + alertFix).remove();
            alertFix--;
        }, 200);
    });

    // After pressing enter key it will click on the button
    document.addEventListener('keyup', () => {
        if (event.keyCode == 13) {
            btn.click();
        }
    });

    // Change background on mouse over the button
    btn.addEventListener('mouseover', () => {
        btn.style.background = '#1b1b1b';
    });

    // Change back background on mouse over the button
    btn.addEventListener('mouseleave', () => {
        btn.style.background = '#1e1e1e';
    });

    // Resolution fixes
    function media(x) {
        if (x.matches) {
            el.style.width = '20rem';
        } else {
            el.style.width = '25rem';
        }
    }
    let x = window.matchMedia('(max-width: 455px)');
    media(x);
    x.addListener(media);

    // Appearing transition
    setTimeout(() => {
        el.style.top = '50%';
        el.style.opacity = '1';
    });
}

// Declare new variable to fix the prompt
let promptFix = 0;

// Better prompt
export function prompt(title, buttonText, placeholder) {
    promptFix++;

    const el = document.createElement('div');
    el.innerHTML = `<h3 class="xorio-prompt-title" style="margin-top: 5px; font-family: Segoe UI;">${document.URL} says<br> <code style="margin-top: 4px;">${title}</code></h3>`;
    el.classList.add('xorio-prompt', 'prompt-' + promptFix);
    document.body.appendChild(el);

    // Throws an error when the title is null
    if (title == '') {
        setTimeout(() => {
            document.querySelector('.prompt-' + promptFix).remove();
        });
        throw new Error(`Title can not be null \nTry using this: \n   xorio.alert("${document.title}");`);
    }

    // Removes the context menu
    el.addEventListener('contextmenu', e => {
        e.preventDefault();
    });

    // Parent style
    el.style.background = '#121212';
    el.style.color = '#fff';
    el.style.width = '25rem';
    el.style.height = '6.5rem';
    el.style.transform = 'translate(-50%, -50%)';
    el.style.position = 'fixed';
    el.style.left = '50%';
    el.style.top = '47%';
    el.style.borderRadius = '8px';
    el.style.padding = '10px';
    el.style.opacity = '0';
    el.style.zIndex = '100';
    el.style.transition = 'top 200ms, opacity 200ms';

    // Creates the OK button
    const btn = document.createElement('button');
    btn.innerHTML = buttonText;
    btn.classList.add('xorio-prompt-btn');
    document.querySelector('.prompt-' + promptFix).appendChild(btn);

    // If the text is null it will make the button string OK
    if (btn.innerHTML == 'undefined' || btn.innerHTML == '') {
        btn.innerHTML = 'OK';
    }

    // Button style
    btn.style.background = '#1e1e1e';
    btn.style.color = '#fff';
    btn.style.border = 'none';
    btn.style.padding = '7px';
    btn.style.cursor = 'pointer';
    btn.style.fontFamily = 'Segoe UI';
    btn.style.borderRadius = '5px';
    btn.style.float = 'right';
    btn.style.textTransform = 'uppercase';
    btn.style.transition = 'background 200ms';

    // Change background on mouse over the button
    btn.addEventListener('mouseover', () => {
        btn.style.background = '#1b1b1b';
    });

    // Change back background on mouse over the button
    btn.addEventListener('mouseleave', () => {
        btn.style.background = '#1e1e1e';
    });

    // Creates the text box
    const inputField = document.createElement('input');
    inputField.type = 'text';
    inputField.placeholder = placeholder;
    inputField.spellcheck = false;
    inputField.classList.add('xorio-text_input', 'text-input-' + promptFix);
    document.querySelector('.prompt-' + promptFix).appendChild(inputField);
    document.querySelector('.text-input-' + promptFix).focus();

    // If the placeholder is null it will remove the undefined text
    if (inputField.placeholder == 'undefined') {
        inputField.placeholder = '';
    }

    // Input field style
    inputField.style.background = '#1e1e1e';
    inputField.style.border = 'none';
    inputField.style.color = '#fff';
    inputField.style.padding = '7px';
    inputField.style.outline = 'none';
    inputField.style.fontFamily = 'Segoe UI';
    inputField.style.borderRadius = '5px';

    // Removes the alert after clicking the OK button
    btn.addEventListener('click', () => {
        // Disappearing transition
        el.style.opacity = '0';
        el.style.top = '47%';

        // Removes the element
        setTimeout(() => {
            document.querySelector('.prompt-' + promptFix).remove();
            promptFix--;
        }, 200);
    });

    // After pressing enter key it will click on the button
    document.addEventListener('keyup', () => {
        if (event.keyCode == 13) {
            btn.click();
        }
    });

    // Resolution fixes
    function media(x) {
        if (x.matches) {
            el.style.width = '20rem';
        } else {
            el.style.width = '25rem';
        }
    }
    let x = window.matchMedia('(max-width: 455px)');
    media(x);
    x.addListener(media);

    // Appearing transition
    setTimeout(() => {
        el.style.top = '50%';
        el.style.opacity = '1';
    });
}

// Makes element moves with arrow keys
export function arrowsMovement(element) {
    // Selects element, makes the position of the element fixed, creates the coordinates variables
    const el = document.querySelector(element);
    el.style.position = 'fixed';
    var x = 0, y = 0;

    // Moving the selected element after pressing a key
    document.addEventListener('keydown', e => {
        if (e.keyCode == 39) {
            x += 10;
            el.style.left = x + 'px';
        } else if (e.keyCode == 37) {
            x -= 10;
            el.style.left = x + 'px';
        } else if (e.keyCode == 40) {
            y += 10;
            el.style.top = y + 'px';
        } else if (e.keyCode == 38) {
            y -= 10;
            el.style.top = y + 'px';
        }
    });
}

// Changes the position of the selected element
export function randomPosition(element) {
    const el = document.querySelector(element);

    el.style.position = 'fixed';
    el.style.left = Math.random() * window.innerWidth + 'px';
    el.style.top = Math.random() * window.innerHeight + 'px';
}

// Creates a random things
export class Random {
    constructor() {
        this.variable = this.variable;
    }

    // Random letter
    letter(parent) {
        const randElement = document.createElement('div');
        document.querySelector(parent).appendChild(randElement);
        randElement.classList.add('xorio-randomizer', 'xorio-random-ltr');
        let letter = Math.floor(Math.random() * (122 - 97 + 1) + 97);
        randElement.innerHTML = String.fromCharCode(letter);
        randElement.style.fontFamily = 'Segoe UI';
    }
    // Random number
    number(parent, number_limit) {
        if (Number.isInteger(number_limit) == false) {
            throw new Error('Value can only be an "integer" \n   Try removing the quotes from the "value"');
        }

        const randElement = document.createElement('div');
        document.querySelector(parent).appendChild(randElement);
        randElement.classList.add('xorio-randomizer', 'xorio-random-num');
        randElement.innerHTML = Math.floor(Math.random() * number_limit);
        randElement.style.fontFamily = 'Segoe UI';
    }
    // Random variable number
    var(number_limit) {
        if (Number.isInteger(number_limit) == false) {
            throw new Error('Value can only be an "integer" \n   Try removing the quotes from the "value"');
        }

        this.variable = Math.floor(Math.random() * number_limit);
    }
}